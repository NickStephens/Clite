Nick Stephens

---------------------------------
Producing JVM Byte Code for Clite
---------------------------------

Jan 12, 2013

Questions:
a. When in the compiling process should byte code be produced?
b. What kind of formatting or boiler plate do I need to abide by?

a. Probably in Semantic Interpretation

Jan 20, 2013

Conceptual Details:
-Need to write to a file
-Need to be able to extract type of values and variables (JVM has type-specific instructions)
-Need to be able to statically determine stack size and local size of a function
-Need to be able to generically translate high-level control structures into their low-level equivalents

Implementation Details:
-All meaning functions should begin writing to the file passed to it.
	or
-All meaning functions should begin returning strings
-Write JVM boilerplate in M(Program)

-Creating new class JasminFile, which is a descendent of Java Lib File

All functions will be static, and the amount and types of their arguments must be deterministic.

Jan 21, 2012

Conceptual Details:
-I've been able to limit the stack (for plain Clite) to two elements
-A symbol table is necessary to track which variables are tied to which local's (locals in the JVM are represented with integers)

Implementation Details:
-When pushing values (or constants) onto the stack, I will use the "ldc" instruction
-SymbolTable may have to be expanded into carrying the symbol's type, this will allow us to quickly determine what type of storage instruction
 needs to be written
-The JVM lacks the instructions to strictly store and represent booleans and characters. Need to research examples
