Nick Stephens

---------------------------------
Producing JVM Byte Code for Clite
---------------------------------

Jan 12, 2013

Questions:
a. When in the compiling process should byte code be produced?
b. What kind of formatting or boiler plate do I need to abide by?

a. Probably in Semantic Interpretation

Jan 20, 2013

Conceptual Details:
-Need to write to a file
-Need to be able to extract type of values and variables (JVM has type-specific instructions)
-Need to be able to statically determine stack size and local size of a function
-Need to be able to generically translate high-level control structures into their low-level equivalents

Implementation Details:
-All meaning functions should begin writing to the file passed to it.
	or
-All meaning functions should begin returning strings
-Write JVM boilerplate in M(Program)

-Creating new class JasminFile, which is a descendent of Java Lib File

All functions will be static, and the amount and types of their arguments must be deterministic.

Jan 21, 2013

Conceptual Details:
-I've been able to limit the stack (for plain Clite) to two elements
-A symbol table is necessary to track which variables are tied to which local's (locals in the JVM are represented with integers)

Implementation Details:
-When pushing values (or constants) onto the stack, I will use the "ldc" instruction
-SymbolTable may have to be expanded into carrying the symbol's type, this will allow us to quickly determine what type of storage instruction
 needs to be written
-The JVM lacks the instructions to strictly store and represent booleans and characters. Need to research examples

Jan 23, 2013

Bugs:
-The inclusion of parenthesised expressions will break the stack limit of two; however I think evaluation order is maintained

Conceptual Details:
-Booleans and characters are represented as Ints in Jasmin

Implementation details:
-Stack counter which counts the number of elements the largest expression needs
-	This will be stored in a global variable and will be written once all expressions are traversed.

Troubles:
-none of the comparison operators return an int alone, most of them seem to branch. 
-creating modular labels procedurally is another issue.

-labels (or subroutines) which push ints (in response to the first trouble) will have trouble returning to the place where the branch originated
-lookupswitches (or perhaps comparisons) where unique labels are below (ie two labels for each comparison!)

example
int1  0
int2  2
if_icmpgt TRUE0

TRUE0:
bipush 1 
goto COMPLETE0 

FALSE0:
bipush 0

COMPLETE0: ;We know the result is on the stack

The zeros here would be for this particular comparison, these numbers would have constantly be generated per comparison

Feb 20, 2013
Loops and conditonals are now compiling. I'm going to now include a print statement.
This new statement should exist in a seperate module file, to help git merge both 
the CliteF and CodeGen branches. In the AbstractSyntax print will inherent from 
Statement and will contain an expression, which it will evaluate and print.

-- No such thing as if_fcmplt ... removing

Feb 21, 2013
I plan on making a print function to allow better debugging within the compiled jasmin files.

The print function now parses and is typechecked, but I'm having trouble get System.out.println to print, I think it only takes string arguments
If this is the case then I'm going to have to call toString on them before I print which wouldn't be so bad

Feb 22, 2013
Nevermind the last two lines, apparently I just forgot to to print the "V" which
represents that println has a return type of void.

Feb 23, 2013
Wrote the clc (CLite Compile) script to compile clite. 

Feb 27, 2013
Starting work on CodeGen for CliteF, Clite with functions.

Details:

1. How are globals going to be stored in Jasmin?
2. What kind of methods will Clite's functions translate to?
3. How will symbol table information be stored for each individual function?
4. How will functions know when the variable they need to access is a global?

1. I think all globals will be stored in Jasmin as static fields.
2. methods will all be static 
3. Each individual function will have its own symbol table

How to handle symbol table traversal:
	1. Can store symbol tables in a stack, pushing and poping as we enter new
	symbol tables, this may not be necessary though as we don't need to store
	volatile values only static values representing the local
	(How will this affect recursion?)
	2. Can simply have a current symbol table instance variable, this will 
	consume a lot less memory and overhead (we're only storing a string, we 
	won't need to worry about managing a dynamic array!)
	(How will this affect recursion?)

4. The function which initializes Symbol Tables will have contain a new function,
contains_symbol, if this function returns true then it is safe to resolve the 
variable against the current symbol table, otherwise resolve the variable against
a global field
	Disadvantages: Requires a test whenever a variable has to be resovled;
	however, since variables are a single node this test should only take
	place in one code block

Feb 28:
Static methods pass parameters through local 0! there is no space reserved for the object, since these methods do not operate or belong to objects the JVM is smart enough to leave more spce for formal parameters!

Recursive methods where return statements only exists though off my branching mechanism. Becuase Jasmin sees a COMPLETE? branch which does not return and leads into no where

Reflection:

As with any project some poor design decisions were made, and some steps could have been taken to save time and write more elegant code.

* For one, a function belonging to the Type class which is responsible for converting Clite types (Int, Bool, Char, Float) to Jasmin types (I, F) when the need arose would have been really helpful and saved me time from writing tedious and repetive branches to print the correct Jasmin type.
* A more general symbol table approach, responsible for both globals and locals/params

